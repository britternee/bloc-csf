Exercises

1. What are some pros and cons of using linked lists instead of arrays?

A: 
Pros: Dynamic, no empty placeholders, nodes are independent in memory so any available memory can be used for storage, can grow to immense sizes

Cons: can be inefficient to access an element within the list, elements must be accessed in order starting from the head node


2. Come up with a real world example of a linked list.

A: The best example I found that made a lot of sense is a scavenger hunt. Each clue can be scattered around the house or park with details on where to find the next one! The clues don't have to be sitting on a table in a sequential order to understand and find the next one.



Programming Exercises

1. The Linked List push function should take a value, create a node, and add it to the end of a list. Below is a push function for a singly linked list. However, there is something wrong with it. Find the bug and fix the code.

A: I believe the original pseudocode (in the second half of the code) was stating both that if there was no head node to make the current node the head node, and also if there IS a head node, to also make the current node the head node. Obviously this is incorrect, as new nodes should be added as the next node.

LinkedList.prototype.push = function(element) {
 SET node = {
   value: element,
   next: null
 }

 IF the head node does not exist
   THEN SET head to node
 ELSE
   SET current.next to node
 }
}

2. Given an unsorted singly linked list, remove all duplicates from the linked list.

A:

'use strict';

function LinkedList () {
    this.head = null;
}

LinkedList.prototype.removeDuplicates = function () {
    
    if (!this.head || !this.head.next) {
      console.log('No duplicates were found. ');
      return;
    }

    var p1;
    var p2;
    var nodes = {};

    p1 = this.head;
    p2 = p1.next;
    nodes[p1.data] = true;

    while (p2) {
        var data = p2.data;
        if (nodes[data]) {
            p1.next = p2.next;
        } else {
            nodes[data] = true;
            p1 = p2;
        }
        p2 = p2.next;
    }
};


3: Given an unsorted singly linked list, reverse it.

A: 

'use strict';

function LinkedList () {
    this.head = null;
}

LinkedList.prototype.reverseLinkedList = function () {

  if (!this.head || !this.head.next) {
    console.log('No duplicates were found. ');
    return;
  }
  
  var p1 = null;
  var p2 = this.head;
  var p3;

  while (p2) {
    p3 = p2.next;
    p2.next = p1;
    p1 = p2;
    p2 = p3;
  }

  this.head = p1;
}
