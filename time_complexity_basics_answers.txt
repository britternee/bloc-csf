Exercises


1. What is time complexity and what is its relation to algorithms?

A: Time complexity if the metric used to describe the efficiency of an algorithm. It's expressed as a function that estimates the time it takes to execute a program.



2. What is runtime?

A: Runtime refers to the physical time duration of an algorithm. Runtime is often used synonymously with Time Complexity.



3. How is the runtime of an algorithm calculated?

A: To determine the runtime of an algorithm, we add up how many instructions the algorithm will execute asa function of the size of its input, then we simplify the expression to the largest term and drop any constants.



4. Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.

A:

- Constant Growth Rate: O(1)
- Logarithmic Growth Rate: O(log n)
- Linear Growth Rate: O(n)
- Log-Linear Growth Rate: O(n log n)
- Quadratic Growth Rate: O(n^2)
- Cubic Growth Rate: O(n^3)
- Exponential Growth Rate: O(2^n)



5. Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

A: A real life example of Linear Growth Rate would be the payroll of a company. If our company pays every employee $650 per week, adding an additional employee will increase payroll by $650 per week. Every time we hire another employee, we increase the weekly payroll by $650.


6. Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION


A: O(n)


7. Determine the time complexity of the following snippet of code.

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION 

A: O(n^2)


8. Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

A: O(2^n)


9. Out of the code snippets you just saw, which is the most time efficient?

A: O(n) - the linear search
